{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\milos.mihajlovic\\\\source\\\\repos\\\\CASHREGISTER\\\\CashRegister-Frontend\\\\src\\\\components\\\\Auth\\\\LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\nimport { billActions } from '../../store/billSlice';\nimport { useDispatch } from 'react-redux';\nimport { uiActions } from '../../store/uiSlice';\nimport useInput from '../../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isNotEmpty = value => value.trim() !== '';\n\nconst LoginForm = () => {\n  _s();\n\n  //\n  //\n  const {\n    value: usernameValue,\n    isValid: usernameIsValid,\n    hasError: usernameHasError,\n    valueChangeHandler: usernameChangeHandler,\n    inputBlurHandler: usernameBlurHandler,\n    reset: resetUsername\n  } = useInput(isNotEmpty);\n  const {\n    value: passwordValue,\n    isValid: passwordIsValid,\n    hasError: passwordHasError,\n    valueChangeHandler: passwordChangeHandler,\n    inputBlurHandler: passwordBlurHandler,\n    reset: resetPassword\n  } = useInput(isNotEmpty);\n  let formIsValid = false;\n\n  if (usernameIsValid && passwordIsValid) {\n    formIsValid = true;\n  } //\n  //   \n\n\n  const history = useHistory(); //   const usernameInputRef = useRef();\n  //   const passwordInputRef = useRef();\n\n  const dispatch = useDispatch();\n  const authCtx = useContext(AuthContext);\n\n  async function GetUsersId(username) {\n    const response = await fetch(`https://localhost:7269/api/User/GetUsersId/${username}`);\n    const data = await response.json();\n    console.log(response);\n    console.log(data);\n    dispatch(billActions.setUserId(data));\n  }\n\n  async function Login(userCredsObj) {\n    //setNotificationObj({component:'ProductForm',status:'pending',title:'Sending',message:'Sending...'})\n    const credentials = JSON.stringify(userCredsObj);\n    console.log(credentials);\n    const response = await fetch('https://localhost:7269/api/User/login', {\n      method: 'POST',\n      body: credentials,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error('error');\n    }\n\n    const expirationTime = new Date(new Date().setHours(new Date().getHours() + 8));\n    authCtx.login(data, expirationTime.toISOString());\n    GetUsersId(userCredsObj.username);\n    const getUserResponse = await fetch('https://localhost:7269/api/User/GetUserByCredentials', {\n      method: 'POST',\n      body: credentials,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const getUserData = await getUserResponse.json();\n\n    if (getUserData.role === 'admin') {\n      history.replace('/admin');\n      dispatch(uiActions.isOnAdminsPage());\n    } else if (getUserData.role === 'user') {\n      history.replace('/homepage');\n    } //history.replace('/homepage');\n    // dispatch(productActions.addProduct(productObj))\n    // setNotificationObj({component:'ProductForm',status:'success',title:'Success!',message:'Successfuly created product'})\n\n  }\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    if (!formIsValid) {\n      return;\n    } // const enteredUsername = usernameInputRef.current.value;\n    // const enteredPassword = passwordInputRef.current.value;\n    // optional: Add validation\n    // setIsLoading(true);\n\n\n    const credentials = {\n      username: usernameValue,\n      password: passwordValue\n    };\n    Login(credentials).catch(error => {\n      console.log('eeroror');\n    });\n    resetUsername();\n    resetPassword();\n  };\n\n  const clearNotificationHandler = () => {//setNotificationObj({component:'',status:'',title:'',message:''})\n  }; //\n\n\n  const usernameClasses = usernameHasError ? classes.control + ' invalid' : classes.control;\n  const passwordClasses = passwordHasError ? classes.control + ' invalid' : classes.control; //\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      onFocus: clearNotificationHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: usernameClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"username\",\n          children: \"Username:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"username\",\n          value: usernameValue,\n          onChange: usernameChangeHandler,\n          onBlur: usernameBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), usernameHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.errorText,\n          children: \"Please enter username.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: passwordClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"password\",\n          value: passwordValue,\n          onChange: passwordChangeHandler,\n          onBlur: passwordBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), passwordHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.errorText,\n          children: \"Please enter password.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginForm, \"OEAZ63YLsVx1Oist0/DhyQJYXMg=\", false, function () {\n  return [useInput, useInput, useHistory, useDispatch];\n});\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["useState","useRef","useContext","useHistory","AuthContext","classes","billActions","useDispatch","uiActions","useInput","isNotEmpty","value","trim","LoginForm","usernameValue","isValid","usernameIsValid","hasError","usernameHasError","valueChangeHandler","usernameChangeHandler","inputBlurHandler","usernameBlurHandler","reset","resetUsername","passwordValue","passwordIsValid","passwordHasError","passwordChangeHandler","passwordBlurHandler","resetPassword","formIsValid","history","dispatch","authCtx","GetUsersId","username","response","fetch","data","json","console","log","setUserId","Login","userCredsObj","credentials","JSON","stringify","method","body","headers","ok","Error","expirationTime","Date","setHours","getHours","login","toISOString","getUserResponse","getUserData","role","replace","isOnAdminsPage","submitHandler","event","preventDefault","password","catch","error","clearNotificationHandler","usernameClasses","control","passwordClasses","auth","errorText","actions"],"sources":["C:/Users/milos.mihajlovic/source/repos/CASHREGISTER/CashRegister-Frontend/src/components/Auth/LoginForm.js"],"sourcesContent":["import { useState, useRef, useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AuthContext from '../../store/auth-context';\r\nimport classes from './AuthForm.module.css';\r\nimport { billActions } from '../../store/billSlice';\r\nimport {useDispatch} from 'react-redux';\r\nimport { uiActions } from '../../store/uiSlice';\r\nimport useInput from '../../hooks/use-input';\r\n\r\nconst isNotEmpty=(value)=>value.trim() !== '';\r\n\r\nconst LoginForm = () => {\r\n    //\r\n    //\r\n    const {\r\n        value: usernameValue,\r\n        isValid: usernameIsValid,\r\n        hasError: usernameHasError,\r\n        valueChangeHandler: usernameChangeHandler,\r\n        inputBlurHandler: usernameBlurHandler,\r\n        reset: resetUsername,\r\n      } = useInput(isNotEmpty);\r\n      const {\r\n        value: passwordValue,\r\n        isValid: passwordIsValid,\r\n        hasError: passwordHasError,\r\n        valueChangeHandler: passwordChangeHandler,\r\n        inputBlurHandler: passwordBlurHandler,\r\n        reset: resetPassword,\r\n      } = useInput(isNotEmpty);\r\n\r\n      let formIsValid=false;\r\n      if(usernameIsValid && passwordIsValid){\r\n      formIsValid=true;\r\n    }\r\n//\r\n//   \r\n  const history = useHistory();\r\n//   const usernameInputRef = useRef();\r\n//   const passwordInputRef = useRef();\r\n  const dispatch=useDispatch()\r\n  \r\n  const authCtx = useContext(AuthContext);\r\n\r\n  async function GetUsersId(username){\r\n    const response = await fetch(`https://localhost:7269/api/User/GetUsersId/${username}`);\r\n    const data = await response.json();\r\n    console.log(response)\r\n    console.log(data);\r\n    dispatch(billActions.setUserId(data))  \r\n  }\r\n\r\n  async function Login(userCredsObj) {\r\n    //setNotificationObj({component:'ProductForm',status:'pending',title:'Sending',message:'Sending...'})\r\n    const credentials=JSON.stringify(userCredsObj);\r\n    console.log(credentials)\r\n    const response = await fetch('https://localhost:7269/api/User/login', {\r\n      method: 'POST',\r\n      body: credentials,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept':'application/json'\r\n      }\r\n    });\r\n    const data=await response.json()\r\n    if (!response.ok) {\r\n      throw new Error('error');\r\n    }\r\n    const expirationTime = new Date(\r\n            new Date().setHours(new Date().getHours() + 8)\r\n          )\r\n    authCtx.login(data, expirationTime.toISOString());\r\n    GetUsersId(userCredsObj.username);\r\n\r\n\r\n\r\n    const getUserResponse = await fetch('https://localhost:7269/api/User/GetUserByCredentials', {\r\n      method: 'POST',\r\n      body: credentials,\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    const getUserData = await getUserResponse.json();\r\n\r\n    if(getUserData.role === 'admin'){\r\n      history.replace('/admin')\r\n      dispatch(uiActions.isOnAdminsPage())\r\n    }\r\n    else if(getUserData.role === 'user'){\r\n      history.replace('/homepage')\r\n    }                                    \r\n    //history.replace('/homepage');\r\n    \r\n   // dispatch(productActions.addProduct(productObj))\r\n   // setNotificationObj({component:'ProductForm',status:'success',title:'Success!',message:'Successfuly created product'})\r\n  }\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    if (!formIsValid)  {\r\n        return;\r\n      }\r\n    // const enteredUsername = usernameInputRef.current.value;\r\n    // const enteredPassword = passwordInputRef.current.value;\r\n    \r\n    // optional: Add validation\r\n \r\n    // setIsLoading(true);\r\n      const credentials={username:usernameValue,password:passwordValue}\r\n      Login(credentials).catch(error=>{\r\n        console.log('eeroror');\r\n      });\r\n    \r\n    resetUsername()\r\n    resetPassword()\r\n}\r\n\r\n  const clearNotificationHandler=()=>{\r\n    //setNotificationObj({component:'',status:'',title:'',message:''})\r\n  }\r\n //\r\n const usernameClasses = usernameHasError ? classes.control+' invalid' : classes.control;\r\n const passwordClasses = passwordHasError ? classes.control+' invalid' : classes.control;\r\n //\r\n\r\n return (\r\n    <section className={classes.auth}>\r\n      <h1>Login</h1> \r\n      <form onSubmit={submitHandler} onFocus={clearNotificationHandler}>\r\n        <div className={usernameClasses}>\r\n        <label htmlFor='username'>Username:</label>\r\n          <input\r\n            type='text'\r\n            id='username'\r\n            value={usernameValue}\r\n            onChange={usernameChangeHandler}\r\n            onBlur={usernameBlurHandler}\r\n          />\r\n          {usernameHasError && <p className={classes.errorText}>Please enter username.</p>}\r\n        </div>\r\n        <div className={passwordClasses}>\r\n        <label htmlFor='password'>Password:</label>\r\n          <input\r\n            type='text'\r\n            id='password'\r\n            value={passwordValue}\r\n            onChange={passwordChangeHandler}\r\n            onBlur={passwordBlurHandler}\r\n          />\r\n          {passwordHasError && <p className={classes.errorText}>Please enter password.</p>}\r\n          </div>\r\n        \r\n        <div className={classes.actions}>\r\n            <button disabled={!formIsValid} >Login</button>\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default LoginForm;"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,OAAOC,QAAP,MAAqB,uBAArB;;;AAEA,MAAMC,UAAU,GAAEC,KAAD,IAASA,KAAK,CAACC,IAAN,OAAiB,EAA3C;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACpB;EACA;EACA,MAAM;IACFF,KAAK,EAAEG,aADL;IAEFC,OAAO,EAAEC,eAFP;IAGFC,QAAQ,EAAEC,gBAHR;IAIFC,kBAAkB,EAAEC,qBAJlB;IAKFC,gBAAgB,EAAEC,mBALhB;IAMFC,KAAK,EAAEC;EANL,IAOAf,QAAQ,CAACC,UAAD,CAPd;EAQE,MAAM;IACJC,KAAK,EAAEc,aADH;IAEJV,OAAO,EAAEW,eAFL;IAGJT,QAAQ,EAAEU,gBAHN;IAIJR,kBAAkB,EAAES,qBAJhB;IAKJP,gBAAgB,EAAEQ,mBALd;IAMJN,KAAK,EAAEO;EANH,IAOFrB,QAAQ,CAACC,UAAD,CAPZ;EASA,IAAIqB,WAAW,GAAC,KAAhB;;EACA,IAAGf,eAAe,IAAIU,eAAtB,EAAsC;IACtCK,WAAW,GAAC,IAAZ;EACD,CAvBmB,CAwBxB;EACA;;;EACE,MAAMC,OAAO,GAAG7B,UAAU,EAA1B,CA1BsB,CA2BxB;EACA;;EACE,MAAM8B,QAAQ,GAAC1B,WAAW,EAA1B;EAEA,MAAM2B,OAAO,GAAGhC,UAAU,CAACE,WAAD,CAA1B;;EAEA,eAAe+B,UAAf,CAA0BC,QAA1B,EAAmC;IACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,8CAA6CF,QAAS,EAAxD,CAA5B;IACA,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;IACAC,OAAO,CAACC,GAAR,CAAYL,QAAZ;IACAI,OAAO,CAACC,GAAR,CAAYH,IAAZ;IACAN,QAAQ,CAAC3B,WAAW,CAACqC,SAAZ,CAAsBJ,IAAtB,CAAD,CAAR;EACD;;EAED,eAAeK,KAAf,CAAqBC,YAArB,EAAmC;IACjC;IACA,MAAMC,WAAW,GAACC,IAAI,CAACC,SAAL,CAAeH,YAAf,CAAlB;IACAJ,OAAO,CAACC,GAAR,CAAYI,WAAZ;IACA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAD,EAA0C;MACpEW,MAAM,EAAE,MAD4D;MAEpEC,IAAI,EAAEJ,WAF8D;MAGpEK,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEP,UAAS;MAFF;IAH2D,CAA1C,CAA5B;IAQA,MAAMZ,IAAI,GAAC,MAAMF,QAAQ,CAACG,IAAT,EAAjB;;IACA,IAAI,CAACH,QAAQ,CAACe,EAAd,EAAkB;MAChB,MAAM,IAAIC,KAAJ,CAAU,OAAV,CAAN;IACD;;IACD,MAAMC,cAAc,GAAG,IAAIC,IAAJ,CACf,IAAIA,IAAJ,GAAWC,QAAX,CAAoB,IAAID,IAAJ,GAAWE,QAAX,KAAwB,CAA5C,CADe,CAAvB;IAGAvB,OAAO,CAACwB,KAAR,CAAcnB,IAAd,EAAoBe,cAAc,CAACK,WAAf,EAApB;IACAxB,UAAU,CAACU,YAAY,CAACT,QAAd,CAAV;IAIA,MAAMwB,eAAe,GAAG,MAAMtB,KAAK,CAAC,sDAAD,EAAyD;MAC1FW,MAAM,EAAE,MADkF;MAE1FC,IAAI,EAAEJ,WAFoF;MAG1FK,OAAO,EAAE;QACP,gBAAgB;MADT;IAHiF,CAAzD,CAAnC;IAOA,MAAMU,WAAW,GAAG,MAAMD,eAAe,CAACpB,IAAhB,EAA1B;;IAEA,IAAGqB,WAAW,CAACC,IAAZ,KAAqB,OAAxB,EAAgC;MAC9B9B,OAAO,CAAC+B,OAAR,CAAgB,QAAhB;MACA9B,QAAQ,CAACzB,SAAS,CAACwD,cAAV,EAAD,CAAR;IACD,CAHD,MAIK,IAAGH,WAAW,CAACC,IAAZ,KAAqB,MAAxB,EAA+B;MAClC9B,OAAO,CAAC+B,OAAR,CAAgB,WAAhB;IACD,CAvCgC,CAwCjC;IAED;IACA;;EACA;;EAED,MAAME,aAAa,GAAIC,KAAD,IAAW;IAC/BA,KAAK,CAACC,cAAN;;IACA,IAAI,CAACpC,WAAL,EAAmB;MACf;IACD,CAJ4B,CAK/B;IACA;IAEA;IAEA;;;IACE,MAAMe,WAAW,GAAC;MAACV,QAAQ,EAACtB,aAAV;MAAwBsD,QAAQ,EAAC3C;IAAjC,CAAlB;IACAmB,KAAK,CAACE,WAAD,CAAL,CAAmBuB,KAAnB,CAAyBC,KAAK,IAAE;MAC9B7B,OAAO,CAACC,GAAR,CAAY,SAAZ;IACD,CAFD;IAIFlB,aAAa;IACbM,aAAa;EAChB,CAlBC;;EAoBA,MAAMyC,wBAAwB,GAAC,MAAI,CACjC;EACD,CAFD,CA3GsB,CA8GvB;;;EACA,MAAMC,eAAe,GAAGtD,gBAAgB,GAAGb,OAAO,CAACoE,OAAR,GAAgB,UAAnB,GAAgCpE,OAAO,CAACoE,OAAhF;EACA,MAAMC,eAAe,GAAG/C,gBAAgB,GAAGtB,OAAO,CAACoE,OAAR,GAAgB,UAAnB,GAAgCpE,OAAO,CAACoE,OAAhF,CAhHuB,CAiHvB;;EAEA,oBACG;IAAS,SAAS,EAAEpE,OAAO,CAACsE,IAA5B;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAM,QAAQ,EAAEV,aAAhB;MAA+B,OAAO,EAAEM,wBAAxC;MAAA,wBACE;QAAK,SAAS,EAAEC,eAAhB;QAAA,wBACA;UAAO,OAAO,EAAC,UAAf;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADA,eAEE;UACE,IAAI,EAAC,MADP;UAEE,EAAE,EAAC,UAFL;UAGE,KAAK,EAAE1D,aAHT;UAIE,QAAQ,EAAEM,qBAJZ;UAKE,MAAM,EAAEE;QALV;UAAA;UAAA;UAAA;QAAA,QAFF,EASGJ,gBAAgB,iBAAI;UAAG,SAAS,EAAEb,OAAO,CAACuE,SAAtB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QATvB;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAYE;QAAK,SAAS,EAAEF,eAAhB;QAAA,wBACA;UAAO,OAAO,EAAC,UAAf;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADA,eAEE;UACE,IAAI,EAAC,MADP;UAEE,EAAE,EAAC,UAFL;UAGE,KAAK,EAAEjD,aAHT;UAIE,QAAQ,EAAEG,qBAJZ;UAKE,MAAM,EAAEC;QALV;UAAA;UAAA;UAAA;QAAA,QAFF,EASGF,gBAAgB,iBAAI;UAAG,SAAS,EAAEtB,OAAO,CAACuE,SAAtB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QATvB;MAAA;QAAA;QAAA;QAAA;MAAA,QAZF,eAwBE;QAAK,SAAS,EAAEvE,OAAO,CAACwE,OAAxB;QAAA,uBACI;UAAQ,QAAQ,EAAE,CAAC9C,WAAnB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QAxBF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADH;AAiCA,CApJD;;GAAMlB,S;UAUIJ,Q,EAQAA,Q,EAQQN,U,EAGDI,W;;;KA7BXM,S;AAsJN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}